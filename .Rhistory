pol.data <- rbind(pol.data, read.csv(files.list[i]))
}
mean(pol.data$pollutant,na.rm = TRUE)
}
PollutantMean("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", "sulfate", 1:3)
PollutantMean <- function(directory, pollutant, id = 1:332) {
# load dplyr
library(dplyr)
# construct table of all included measurements
## create data frame and list of files
pol.data <- data.frame(Date = character(), sulfate = numeric(),
nitrate = numeric(), ID = numeric())
files.list <- list.files(directory, full.names = TRUE)
## loop to fill pol.data
for (i in id) {
pol.data <- rbind(pol.data, read.csv(files.list[i]))
}
mean(pol.data[ , pollutant],na.rm = TRUE)
}
PollutantMean("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", "sulfate", 1:3)
comp.data <- matrix(nrow = 20, ncol = 2)
colnames(comp.data) <- c("id", "nobs")
View(comp.data)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- matrix(nrow = length(id), ncol = 2)
colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- complete.cases(read.csv(files.list[i]))
comp.data[i,1] <- c(i,n)
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- matrix(nrow = length(id), ncol = 2)
colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- complete.cases(read.csv(files.list[i]))
comp.data[i, ] <- c(i,n)
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- matrix(nrow = length(id), ncol = 2)
colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- complete.cases(read.csv(files.list[i]))
comp.data[i, ] <- i
comp.data[ , n]
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
n <- complete.cases(read.csv(files.list[1]))
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- matrix(nrow = length(id), ncol = 2)
colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- sum(complete.cases(read.csv(files.list[i])))
comp.data[i, ] <- i
comp.data[ , n]
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
n <- sum(complete.cases(read.csv(files.list[1])))
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- matrix(nrow = length(id), ncol = 2)
colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- sum(complete.cases(read.csv(files.list[i])))
comp.data[i, 1] <- i
comp.data[i, 2] <- n
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
comp.data <- data.frame(nrow = 20, ncol = 2)
View(comp.data)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- data.frame(id = numeric(), nobs = numeric())
# colnames(comp.data) <- c("id", "nobs")
for (i in id) {
n <- sum(complete.cases(read.csv(files.list[i])))
comp.data[i, 1] <- i
comp.data[i, 2] <- n
}
comp.data
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- data.frame(id = numeric(), nobs = numeric())
for (i in id) {
n <- sum(complete.cases(read.csv(files.list[i])))
comp.data[i, 1] <- i
comp.data[i, 2] <- n
}
assign(comp.data)
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
complete <- function(directory, id = 1:332) {
# load file names and initialize output matrix
files.list <- list.files(directory, full.names = TRUE)
comp.data <- data.frame(id = numeric(), nobs = numeric())
for (i in id) {
n <- sum(complete.cases(read.csv(files.list[i])))
comp.data[i, 1] <- i
comp.data[i, 2] <- n
}
assign(complete.output, comp.data)
}
complete("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 1:5)
x[1] <- 1
cr <- 1
cr[2] <- 2
cr[3] <- 4
View(test.data)
corr <- function (directory, threshold = 0) {
# initialize output and file list
files.list <- list.files(directory, full.names = TRUE)
cr <- 0
row <- 0
# loop to read files
for (i in 1:length(files.list)) {
cur.data <- read.csv(list.files[i])
if (complete.cases(cur.data > threshold)) {
row <- row + 1
cr[row] <- cor(cur.data$sulate, cur.data$nitrate, use =
"pairwise.complete.obs")
}
}
}
cr <- corr("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 50)
corr <- function (directory, threshold = 0) {
# initialize output and file list
files.list <- list.files(directory, full.names = TRUE)
cr <- 0
row <- 0
# loop to read files
for (i in 1:length(files.list)) {
cur.data <- read.csv(files.list[i])
if (complete.cases(cur.data > threshold)) {
row <- row + 1
cr[row] <- cor(cur.data$sulate, cur.data$nitrate, use =
"pairwise.complete.obs")
}
}
cr
}
cr <- corr("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 50)
warnings()
test.file <- read.csv("C:/Users/Joel/Google/Education/Coursera/rprog/specdata/001.csv")
corr <- function (directory, threshold = 0) {
# initialize output and file list
files.list <- list.files(directory, full.names = TRUE)
cr <- 0
row <- 0
# loop to read files
for (i in 1:length(files.list)) {
cur.data <- read.csv(files.list[i])
if (sum(complete.cases(cur.data) > threshold)) {
row <- row + 1
cr[row] <- cor(cur.data$sulate, cur.data$nitrate, use =
"pairwise.complete.obs")
}
}
cr
}
cr <- corr("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 50)
summary(cr)
sum(complete.cases(test.file))
corr <- function (directory, threshold = 0) {
# initialize output and file list
files.list <- list.files(directory, full.names = TRUE)
cr <- 0
row <- 0
# loop to read files
for (i in 1:length(files.list)) {
cur.data <- read.csv(files.list[i])
if (sum(complete.cases(cur.data) > threshold)) {
row <- row + 1
cr[row] <- cor(cur.data$sulfate, cur.data$nitrate, use =
"pairwise.complete.obs")
}
}
cr
}
cor(test.file$sulfate, test.file$nitrate, use = "pairwise.complete.obs")
cr <- corr("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 50)
summary(cr)
corr <- function (directory, threshold = 0) {
# initialize output and file list
files.list <- list.files(directory, full.names = TRUE)
cr <- 0
row <- 0
# loop to read files
for (i in 1:length(files.list)) {
cur.data <- read.csv(files.list[i])
row = i
cr[row] <- cor(cur.data$sulfate, cur.data$nitrate, use =
"pairwise.complete.obs")
#if (sum(complete.cases(cur.data) > threshold)) {
#        row <- row + 1
#        cr[row] <- cor(cur.data$sulfate, cur.data$nitrate, use =
#                               "pairwise.complete.obs")
#}
}
cr
}
cr <- corr("C:/Users/Joel/Google/Education/Coursera/rprog/specdata", 50)
summary(cr)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Returns cached inverse or calculates a new one
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
test <- matrix(c(3,4,1,2), nrow = 2, ncol = 2)
View(test)
class(test)
test.o <- makeCacheMatrix(test)
test.o
test.o$get()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- solve(inv)
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Returns cached inverse or calculates a new one
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
test.o$getInverse()
test.o$getInverse(m)
test.o$get()
test.o$getInverse(test.o$get())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inv) m <<- inv
getInverse <- function() m
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## Returns cached inverse or calculates a new one
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
test.o$get()
cacheSolve(test.o)
cacheSolve <- function(x) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
m
}
cacheSolve(test.o)
test.i <- matrix(c(1,2,3,4), nrow = 2, ncol = 2)
test.o$setInverse(test.i)
cacheSolve(test.o)
test <- matrix(c(3,4,1,2), nrow = 2, ncol = 2)
test.o <- makeCacheMatrix(test)
cacheSolve(test.o)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
class(iris)
View(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
class(mtcars)
View(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x[3] - x[1]
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[3] - x[1]
debug(ls)
ls()
quit
0
eval1 <- read.delim("C:/Users/Joel/Google/Education/Coursera/getdata/Evals/eval1.txt")
View(eval1)
select(eval1, 1:5)
library(dplyr)
select(eval1, 1:5)
install.packages("nmle")
install.packages("lattice")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
axis(x, "blue")
axis(1, "blue")
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
data(movies)
source('~/.active-rstudio-document')
hist(cleandata$steps, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
# load data
walkingdata <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
summary(walkingdata)
# steps per day
library(dplyr)
dailydata <- walkingdata %>% group_by(date) %>% summarise(daily = sum(steps))
## histogram
hist(dailydata$daily, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
## summary
mean(dailydata$daily, na.rm = TRUE)
median(dailydata$daily, na.rm = TRUE)
# pattern
intervaldata <- walkingdata %>% group_by(interval) %>% summarise(avg = mean(steps, na.rm = TRUE))
## time series
plot(x = intervaldata$interval, y = intervaldata$avg, type = "l", main = "Daily Activity", xlab = "Interval", ylab = "Steps During Interval")
## highest interval
intervaldatasort <- arrange(intervaldata, desc(avg))
intervaldatasort$interval[1]
# missing values
sum(is.na(walkingdata$steps))
## imputation
cleandata <- walkingdata
cleandata$steps[1] <- 0
for (i in (1:17568)) {
if (is.na(cleandata$steps[i])) {
cleandata$steps[i] <- cleandata$steps[i-1]
}
}
## histogram
hist(cleandata$steps, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
walkingdata <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
setwd("C:/Users/Joel/Google/Education/Coursera/research")
walkingdata <- read.csv("activity.csv", header = TRUE, stringsAsFactors = FALSE)
summary(walkingdata)
library(dplyr)
dailydata <- walkingdata %>% group_by(date) %>% summarise(daily = sum(steps))
intervaldata <- walkingdata %>% group_by(interval) %>% summarise(avg = mean(steps, na.rm = TRUE))
intervaldatasort <- arrange(intervaldata, desc(avg))
intervaldatasort$interval[1]
sum(is.na(walkingdata$steps))
cleandata <- walkingdata
cleandata$steps[1] <- 0
for (i in (1:17568)) {
if (is.na(cleandata$steps[i])) {
cleandata$steps[i] <- cleandata$steps[i-1]
}
}
hist(cleandata$steps, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
cleandaily <- cleandata %>% group_by(date) %>% summarise(daily = sum(steps))
hist(cleandaily$daily, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
mean(cleandaily$daily, na.rm = TRUE)
median(cleandaily$daily, na.rm = TRUE)
hist(dailydata$daily, breaks = 10, main = "Daily Step Distribution", xlab = "Steps")
mean(dailydata$daily, na.rm = TRUE)
median(dailydata$daily, na.rm = TRUE)
datedata <- dailydata %>% mutate(date = as.Date(date))
View(datedata)
summary(datedata)
class(datedata$date)
datedata <- dailydata %>% mutate(date = as.Date(date)) %>% mutate(weekdays = weekdays(date))
View(datedata)
datedata <- dailydata %>% mutate(date = as.Date(date)) %>% mutate(weekday = weekdays(date))
datedata <- dailydata %>%
mutate(date = as.Date(date)) %>%
mutate(weekday = weekdays(date)) %>%
mutate(type = {if (weekday == "Saturday" | weekday == "Sunday") "weekend" else "weekday"})
View(datedata)
datedata <- dailydata %>%
mutate(date = as.Date(date)) %>%
mutate(weekday = weekdays(date)) %>%
mutate(type = ifelse(weekday == "Saturday" | weekday == "Sunday"), "weekend","weekday")
datedata <- dailydata %>%
mutate(date = as.Date(date)) %>%
mutate(weekday = weekdays(date)) %>%
mutate(type = ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend","weekday")
)
View(datedata)
datedata <- walkingdatadata %>%
mutate(date = as.Date(date)) %>%
mutate(weekday = weekdays(date)) %>%
mutate(type = ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend","weekday"))
datedata <- walkingdata %>%
mutate(date = as.Date(date)) %>%
mutate(weekday = weekdays(date)) %>%
mutate(type = ifelse(weekday == "Saturday" | weekday == "Sunday", "weekend","weekday"))
View(datedata)
View(intervaldata)
dataintervals <- datadata %>% group_by(weekday) %>% group_by(interval) %>% summarize(avg = mean(steps, na.rm = TRUE))
dataintervals <- datedata %>% group_by(weekday) %>% group_by(interval) %>% summarize(avg = mean(steps, na.rm = TRUE))
View(dataintervals)
View(datedata)
View(walkingdata)
dateintervals <- aggregate(steps~interval+type, data = datedata, FUN = function (x) {mean(x,na.rm=T)})
View(dateintervals)
par(2,1)
library(ggplot2)
qplot(interval, steps, data = dateintervals, geom = "line", group = type)
qplot(interval, steps, data = dateintervals, geom = "line", group = type) +
facet_grid(type~.)
cleandata <- walkingdata
cleandata$steps[1] <- 0
for (i in (1:17568)) {
if (is.na(cleandata$steps[i])) {
cleandata$steps[i] <- cleandata$steps[i-1]
}
}
setwd("C:/Users/Joel/Google/Education/Coursera/research/RepData_PeerAssessment1")
save.image("C:/Users/Joel/Google/Education/Coursera/research/RepData_PeerAssessment1/currentversion.RData")
